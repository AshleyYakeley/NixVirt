#!/usr/bin/python3
import sys, argparse, uuid, lxml.etree, libvirt, nixvirt

# parse arguments
parser = argparse.ArgumentParser(prog='virtdeclare',description='Define and control libvirt objects idempotently.')
parser.add_argument('-v', '--verbose', action='store_true', help='report actions to stderr')
parser.add_argument('--connect', action='store', required=True, metavar='URI', help='connection URI (e.g. qemu:///session)')
parser.add_argument('--type', action='store', required=True, choices = nixvirt.objectTypes, help='object type')
specgroup = parser.add_mutually_exclusive_group(required=True)
specgroup.add_argument('--define', action='store', metavar='PATH', help='XML object definition file path')
specgroup.add_argument('--uuid', action='store', metavar='ID', help='object UUID')
specgroup.add_argument('--name', action='store', metavar='ID', help='object name')
parser.add_argument('--state', action='store', choices = ['active','inactive'], help='state to put object in')
parser.add_argument('--restart', action='store', choices = ['always','never','ifchanged'], help='whether to restart the object')
parser.add_argument('--auto', action='store_true', help='set autostart to match state')
args = parser.parse_args()

# set state
match args.state:
    case "active":
        active = True
    case "inactive":
        active = False
    case None:
        active = None

match args.restart:
    case "always":
        restart = True
    case "never":
        restart = False
    case "ifchanged":
        restart = None
    case None:
        restart = None

try:
    session = nixvirt.Session(args.connect,args.verbose)
    oc = nixvirt.getObjectConnection(session,args.type)

    # fetch object
    if args.define:
        spec = nixvirt.ObjectSpec.fromDefinitionFile(oc,args.define,active,restart)
    elif args.uuid:
        specUUID = uuid.UUID(args.uuid).bytes
        spec = nixvirt.ObjectSpec.fromUUID(oc,specUUID,active,restart)
    else:
        spec = nixvirt.ObjectSpec.fromName(oc,args.name,active,restart)

    # define object
    spec.define()

    # set state
    spec.setActive()

    # set autostart
    if args.auto and (active is not None):
        spec.subject.setAutostart(active)

except nixvirt.NixVirtError as err:
    print ("virtdeclare:", err, file=sys.stderr)
    sys.exit(1)

except libvirt.libvirtError as err:
    print ("virtdeclare: libvirt error:", err, file=sys.stderr)
    sys.exit(1)

except lxml.etree.XMLSyntaxError as err:
    print ("virtdeclare: XML error:", err, file=sys.stderr)
    sys.exit(1)
